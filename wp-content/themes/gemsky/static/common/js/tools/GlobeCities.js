(function () {
    var GlobeCities,
        bind = function (fn, me) {
            return function () {
                return fn.apply(me, arguments);
            };
        },
        indexOf = [].indexOf || function (item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    GlobeCities = (function () {
        GlobeCities.prototype.LEFTIES = ["London", "Madrid", "Delhi", "Mexico City"];

        GlobeCities.prototype.NUDGE_PX = {
            UP: 24,
            RIGHT: 20,
            LEFT: 25
        };

        GlobeCities.prototype.citiesVisible = true;

        function GlobeCities() {
            this.showCities = bind(this.showCities, this);
            this.hideCities = bind(this.hideCities, this);
            this.cities = DataLoader.get('cityMetadata');
            this.cities = _(this.cities).where({
                Type: 'major'
            }).value();
            this.createCityLabels();
            this.handleEvents();
            window.hideCityLabels = this.hideCities;
            window.showCityLabels = this.showCities;
        }

        GlobeCities.prototype.hideCities = function () {
            this.citiesVisible = false;
            return d3.select('#city-names').style('opacity', 0);
        };

        GlobeCities.prototype.showCities = function () {
            this.citiesVisible = true;
            return d3.select('#city-names').style('opacity', 1);
        };

        GlobeCities.prototype.handleEvents = function () {
            var self;
            self = this;
            return $('#city-names .content').click(function (event) {
                var city, cityId;
                if (!self.citiesVisible) {
                    return;
                }
                cityId = $(this).closest('.city-name').data('id');
                $('body').addClass('engaged');
                city = _(window.globe.globeCities.cities).where({
                    Id: cityId
                }).first();
                if (typeof VIS_API !== "undefined" && VIS_API !== null) {
                    if (typeof VIS_API.engage === "function") {
                        VIS_API.engage(cityId);
                    }
                }
                $('#city-names .content .name').removeClass('on');
                $(this).find('.name').addClass('on');
                window.majorCities.update({
                    topicId: window.globe.globeTopics.currentTopicId(),
                    cityId: cityId,
                    color: 'cccccc'
                });
                return window.globe.globeCities.reset();
            });
        };

        GlobeCities.prototype.createCityLabels = function () {
            var city, contentEl, i, ix, len, nameEl, ref, results;
            ref = this.cities;
            results = [];
            for (ix = i = 0, len = ref.length; i < len; ix = ++i) {
                city = ref[ix];
                nameEl = $('<div/>').addClass('city-name').appendTo('#city-names');
                contentEl = $('<div/>').addClass('content').appendTo(nameEl);
                $('<span/>').addClass('name').text(city.City).appendTo(contentEl);
                $('<span/>').addClass('rank').appendTo(contentEl);
                results.push(nameEl.data({
                    name: city.City,
                    lat: city.Lat,
                    lon: city.Long,
                    id: city.Id
                }));
            }
            return results;
        };

        GlobeCities.prototype.rankByTopic = function (topicId) {
            var rankedCities;
            $('#city-names').addClass('ranked');
            $('.city-name .name').removeClass('on');
            rankedCities = DataLoader.get('rankingsByTopic').allYears[topicId];
            return $('.city-name').each(function (ix) {
                var cityId, rank;
                cityId = $(this).data('id');
                rank = _.indexBy(rankedCities, function (c) {
                    return c.city.Id === cityId;
                })["true"].rank;
                return $(this).find('.rank').text(rank + 1);
            });
        };

        GlobeCities.prototype.reset = function () {
            return $('#city-names').removeClass('ranked');
        };

        GlobeCities.prototype.disengage = function () {
            VIS_API.disengage();
            $('body').removeClass('engaged');
            return $('#city-names .content .name').removeClass('on');
        };

        GlobeCities.prototype.animate = function () {
            var camera;
            camera = typeof VIS_API !== "undefined" && VIS_API !== null ? typeof VIS_API.getCamera === "function" ? VIS_API.getCamera() : void 0 : void 0;
            if (camera == null) {
                return;
            }
            return $('.city-name').each(function () {
                var angle, cityVector, labelEl, point, ref;
                labelEl = $(this);
                cityVector = Geometry.prototype.latLongToVector3(parseFloat(labelEl.data('lat')), parseFloat(labelEl.data('lon')), VIS_API.getGlobeRadius());
                cityVector.applyAxisAngle(new THREE.Vector3(0.0, 1.0, 0.0), Math.PI / 2.0);
                angle = cityVector.angleTo(camera.position);
                labelEl.toggleClass('backside', angle > Math.PI * 0.4);
                point = window.globe.globeCities.projectedCityPosition(labelEl.data('lat'), labelEl.data('lon'));
                return labelEl.find('.content').css({
                    left: (ref = labelEl.data('name'), indexOf.call(GlobeCities.prototype.LEFTIES, ref) >= 0) ? point.x - labelEl.find('.content').width() - GlobeCities.prototype.NUDGE_PX.LEFT : point.x + GlobeCities.prototype.NUDGE_PX.RIGHT,
                    top: point.y - GlobeCities.prototype.NUDGE_PX.UP
                });
            });
        };

        GlobeCities.prototype.projectedCityPosition = function (lat, lon) {
            var camera, cityVector;
            camera = typeof VIS_API !== "undefined" && VIS_API !== null ? typeof VIS_API.getCamera === "function" ? VIS_API.getCamera() : void 0 : void 0;
            if (camera == null) {
                return;
            }
            cityVector = Geometry.prototype.latLongToVector3(parseFloat(lat), parseFloat(lon), VIS_API.getGlobeRadius());
            cityVector.applyAxisAngle(new THREE.Vector3(0.0, 1.0, 0.0), Math.PI / 2.0);
            cityVector.project(camera);
            return {
                x: (cityVector.x + 1) / 2 * window.innerWidth,
                y: -(cityVector.y - 1) / 2 * window.innerHeight
            };
        };

        return GlobeCities;

    })();

    window.GlobeCities = GlobeCities;

}).call(this);

//# sourceMappingURL=data:application/json;base64,